apiVersion: stackgres.io/v1
kind: SGInstanceProfile
metadata:
  name: warehouse-profile
  namespace: {{ .Release.Namespace }}
spec:
  cpu: "2"
  memory: "4Gi"
---
apiVersion: stackgres.io/v1
kind: SGPostgresConfig
metadata:
  name: warehouse-pgconfig
  namespace: {{ .Release.Namespace }}
spec:
  postgresVersion: "16"
  postgresql.conf:
    shared_buffers: "512MB"
    random_page_cost: "1.5"
    password_encryption: "scram-sha-256"
    shared_preload_libraries: "pg_stat_statements,auto_explain"
    log_checkpoints: "on"
---
apiVersion: stackgres.io/v1
kind: SGPoolingConfig
metadata:
  name: warehouse-poolconfig
  namespace: {{ .Release.Namespace }}
spec:
  pgBouncer:
    pgbouncer.ini:
      pgbouncer:
        pool_mode: transaction
        max_client_conn: "1000"
        default_pool_size: "80"
---
apiVersion: v1
kind: Secret
metadata:
  name: warehouse-aws
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  accessKeyId: {{ .Values.warehouse.backup.accessKey }}
  secretAccessKey: {{ .Values.warehouse.backup.secretKey }}
---
apiVersion: stackgres.io/v1beta1
kind: SGObjectStorage
metadata:
  name: warehouse-objectstorage
  namespace: {{ .Release.Namespace }}
spec:
  type: s3
  s3:
    region: {{ .Values.warehouse.backup.region }}
    bucket: {{ .Values.warehouse.backup.bucketName }}
    awsCredentials:
      secretKeySelectors:
        accessKeyId: { name: "warehouse-aws", key: "accessKeyId" }
        secretAccessKey: { name: "warehouse-aws", key: "secretAccessKey" }
---
apiVersion: stackgres.io/v1
kind: SGScript
metadata:
  name: warehouse-scripts
  namespace: {{ .Release.Namespace }}
spec:
  scripts:
    - name: create-app-user
      script: |
        CREATE USER app PASSWORD 'password' SUPERUSER;
        CREATE DATABASE app OWNER app;
---
apiVersion: stackgres.io/v1
kind: SGCluster
metadata:
  name: warehouse
  namespace: {{ .Release.Namespace }}
spec:
  postgres:
    version: "16"
    extensions: []
  instances: {{ .Values.warehouse.instances }}
  sgInstanceProfile: warehouse-profile
  profile: development
  pods:
    persistentVolume:
      storageClass: warehouse
      size: {{ .Values.warehouse.persistent.size }}
  configurations:
    sgPostgresConfig: warehouse-pgconfig
    sgPoolingConfig: warehouse-poolconfig
    backups:
      - sgObjectStorage: warehouse-objectstorage
        cronSchedule: "0 0 1,8,16,24 *"
        retention: 7
---
